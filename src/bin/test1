use chrono::{NaiveDate, Datelike, Duration, Local};

fn main() {
    // Получение текущей даты
    let today = Local::today().naive_local();

    let year = today.year();
    let month = today.month();

    // Первый день текущего месяца
    let first_day_of_month = NaiveDate::from_ymd(year, month, 1);

    // Первый день следующего месяца
    let (next_year, next_month) = if month == 12 {
        (year + 1, 1)
    } else {
        (year, month + 1)
    };
    let first_day_next_month = NaiveDate::from_ymd(next_year, next_month, 1);

    // Последний день текущего месяца
    let last_day_of_month = first_day_next_month - Duration::days(1);
    let num_days_in_month = last_day_of_month.day();

    // Определяем день недели первого числа месяца (0 = Понедельник)
    let first_weekday = first_day_of_month.weekday().num_days_from_monday();

    // Инициализируем календарь
    let mut calendar: Vec<Vec<Option<NaiveDate>>> = Vec::new();
    let mut week: Vec<Option<NaiveDate>> = Vec::new();

    // Заполняем первую неделю пустыми значениями до первого дня
    for _ in 0..first_weekday {
        week.push(None);
    }

    // Заполняем даты месяца
    for day in 1..=num_days_in_month {
        let date = NaiveDate::from_ymd(year, month, day);
        week.push(Some(date));

        if week.len() == 7 {
            calendar.push(week);
            week = Vec::new();
        }
    }

    // Если остались дни в неделе, дополняем её пустыми значениями и добавляем в календарь
    if !week.is_empty() {
        while week.len() < 7 {
            week.push(None);
        }
        calendar.push(week);
    }

    // Выводим календарь для проверки
    for week in calendar {
        for day in week {
            match day {
                Some(date) => print!("{:2} ", date.day()),
                None => print!("   "),
            }
        }
        println!();
    }
}
